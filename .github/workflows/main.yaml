name: Main

## This Github Action workflow is triggered, if code is pushed to the main branch or a Pull Request
## (PR) is opened / edited from the dev branch.
## In real world scenario, pushing directly to the main branch should be blocked.
on:
  push:
    branches: [ main ]
    paths: [ backend, frontend ]
  pull_request:
    branches: [ dev ]
    types: [ opened, edited ]

  ## Adding this allows us to trigger this workflow manually (Just for debugging purposes).
  workflow_dispatch: { }

jobs:

  scan_sourcecode:
    name: Scanning sourcecode to find vulberabilities, misconfigurations and exposed secrets
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create outputs directory
        run: mkdir -p ./outputs/trivy

      - name: Run Trivy vulnerability and secret scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          trivy-config: trivy.yaml
          format: sarif
          output: ./outputs/trivy/fs-scan.result.sarif

      - name: Upload the scan result as Github artifact
        uses: actions/upload-artifact@v3
        with:
          name: fs-scan.result.sarif
          path: ./outputs/trivy/fs-scan.result.sarif

      - name: Detect IaC vulnerabilities and misconfigurations using Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
          trivy-config: trivy.yaml
          format: sarif
          output: ./outputs/trivy/config-scan.result.sarif

      - name: Upload the scan result as Github artifact
        uses: actions/upload-artifact@v3
        with:
          name: config-scan.result.sarif
          path: ./outputs/trivy/config-scan.result.sarif

      ## The Trivy scan results will be uploaded to Github CodeQL only when code is being pushed to
      ## the main branch.
      - name: Upload the scan results to Github CodeQL
        if: github.ref == 'refs/heads/main'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./outputs/trivy


## BUILD, PUSH, SIGN AND SCAN CONTAINER IMAGES ##
## If sourcecode of any of the microservices has changed, only then we will rebuild, push, sign
## and scan the container images.

  detect_microservices_sourcecode_change:
    name: Detect if microservices related sourcecode has changed
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            microservices:
              - 'backend/**'
              - 'frontend/**'
    outputs:
      backend: ${{ steps.filter.outputs.microservices }}

  build_push_sign_and_scan_container_images:
    name: Build, push, sign and scan container images
    needs: detect_microservices_sourcecode_change
    if: needs.detect_microservices_sourcecode_change.outputs.microservices == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        dockerfile:
          - path: backend/microservices/authentication/Dockerfile
            microservice: authentication-microservice
          - path: backend/microservices/authentication/Dockerfile
            microservice: authentication-microservice
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: Archisman-Mridha
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 and ARM64 based container image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ matrix.dockerfile.path }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/Archisman-Mridha/whatsapp-clone-${{ matrix.dockerfile.microservice }}:${{ github.sha }}
          ## Experimental cache exporter for GitHub Actions provided by buildx and BuildKit.
          ## It uses the GitHub Cache API to fetch and load the Docker layer cache blobs across
          ## builds.
          cache-from: type=gha
          cache-to: type=gha,mode=max

      ## Cosign is a command line utility that can sign and verify software artifact, such as
      ## container images and blobs.
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1

      - name: Write cosign signing key (stored in Github Secrets) to disk
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

      - name: Sign the published container image
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: cosign sign --key cosign.key ghcr.io/Archisman-Mridha/whatsapp-clone-${{ matrix.dockerfile.microservice }}:${{ github.sha }}